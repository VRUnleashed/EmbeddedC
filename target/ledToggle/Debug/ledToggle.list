
ledToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000093b  00000000  00000000  00010342  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c25  00000000  00000000  00010ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000606  00000000  00000000  00012ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007e3a  00000000  00000000  000130cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001af05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001af80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002f8 	.word	0x080002f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002f8 	.word	0x080002f8

080001d4 <main>:

#include <stdio.h>
#include <stdint.h>

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
	uint32_t* pClkCntrlReg = (uint32_t*) 0x40023830;
 80001da:	4b1c      	ldr	r3, [pc, #112]	; (800024c <main+0x78>)
 80001dc:	60fb      	str	r3, [r7, #12]
	uint32_t* pPortAModeReg = (uint32_t*) 0x40020000;
 80001de:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <main+0x7c>)
 80001e0:	60bb      	str	r3, [r7, #8]
	uint32_t* pPortAOutReg = (uint32_t*) 0x40020014;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <main+0x80>)
 80001e4:	607b      	str	r3, [r7, #4]

	// enable clock for gpioa
	*pClkCntrlReg = *pClkCntrlReg | 0x00000001; // 0x00000001 to enable
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0201 	orr.w	r2, r3, #1
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	601a      	str	r2, [r3, #0]

	// configure the mode
	*pPortAModeReg = *pPortAModeReg &~ (3 << 10);
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	601a      	str	r2, [r3, #0]
	*pPortAModeReg = *pPortAModeReg | (1 << 10);
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	601a      	str	r2, [r3, #0]

	while(1) {
		// set the 5th bit of o/p data reg to make I/O pin-5 high
		*pPortAOutReg = *pPortAOutReg | (1 << 5); // 0x00000020 to turn on
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0220 	orr.w	r2, r3, #32
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]

		for(uint32_t i = 0; i < 300000; i++);
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
 800021a:	e002      	b.n	8000222 <main+0x4e>
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	3301      	adds	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <main+0x84>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d9f8      	bls.n	800021c <main+0x48>

		*pPortAOutReg = *pPortAOutReg &~ (1 << 5);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f023 0220 	bic.w	r2, r3, #32
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]

		for(uint32_t i = 0; i < 300000; i++);
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	e002      	b.n	8000242 <main+0x6e>
 800023c:	693b      	ldr	r3, [r7, #16]
 800023e:	3301      	adds	r3, #1
 8000240:	613b      	str	r3, [r7, #16]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <main+0x84>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d9f8      	bls.n	800023c <main+0x68>
		*pPortAOutReg = *pPortAOutReg | (1 << 5); // 0x00000020 to turn on
 800024a:	e7de      	b.n	800020a <main+0x36>
 800024c:	40023830 	.word	0x40023830
 8000250:	40020000 	.word	0x40020000
 8000254:	40020014 	.word	0x40020014
 8000258:	000493df 	.word	0x000493df

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490e      	ldr	r1, [pc, #56]	; (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0b      	ldr	r4, [pc, #44]	; (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000286:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffa1 	bl	80001d4 <main>

08000292 <LoopForever>:

LoopForever:
    b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	4e0d      	ldr	r6, [pc, #52]	; (80002e8 <__libc_init_array+0x38>)
 80002b4:	4c0d      	ldr	r4, [pc, #52]	; (80002ec <__libc_init_array+0x3c>)
 80002b6:	1ba4      	subs	r4, r4, r6
 80002b8:	10a4      	asrs	r4, r4, #2
 80002ba:	2500      	movs	r5, #0
 80002bc:	42a5      	cmp	r5, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	4e0b      	ldr	r6, [pc, #44]	; (80002f0 <__libc_init_array+0x40>)
 80002c2:	4c0c      	ldr	r4, [pc, #48]	; (80002f4 <__libc_init_array+0x44>)
 80002c4:	f000 f818 	bl	80002f8 <_init>
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	2500      	movs	r5, #0
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d8:	4798      	blx	r3
 80002da:	3501      	adds	r5, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e2:	4798      	blx	r3
 80002e4:	3501      	adds	r5, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
