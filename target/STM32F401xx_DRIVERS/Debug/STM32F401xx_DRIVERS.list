
STM32F401xx_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000638  08000640  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000638  08000638  00010640  2**0
                  CONTENTS
  4 .ARM          00000000  08000638  08000638  00010640  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000638  08000640  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000640  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000640  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010640  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013dd  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000491  00000000  00000000  00011a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  00011ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  00011ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dd14  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000fae  00000000  00000000  0001fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004facb  00000000  00000000  00020d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00070855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000344  00000000  00000000  000708d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000620 	.word	0x08000620

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000620 	.word	0x08000620

080001d4 <led_init>:

#include <stdint.h>
#include "main.h"
#include "stm32f401xx_gpio_driver.h"

void led_init(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	gpio_pin_conf_t led_pin_conf;

	_HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <led_init+0x38>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a0b      	ldr	r2, [pc, #44]	; (800020c <led_init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30

	led_pin_conf.pin = LED_GREEN;
 80001e6:	2305      	movs	r3, #5
 80001e8:	603b      	str	r3, [r7, #0]
	led_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	607b      	str	r3, [r7, #4]
	led_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
	led_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 80001f2:	2301      	movs	r3, #1
 80001f4:	613b      	str	r3, [r7, #16]
	led_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]

	hal_gpio_init(GPIOA, &led_pin_conf);
 80001fa:	463b      	mov	r3, r7
 80001fc:	4619      	mov	r1, r3
 80001fe:	4804      	ldr	r0, [pc, #16]	; (8000210 <led_init+0x3c>)
 8000200:	f000 f943 	bl	800048a <hal_gpio_init>

}
 8000204:	bf00      	nop
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <led_toggle>:
void led_turn_off(GPIO_TypeDef *GPIOx,uint32_t pin_no) {
	hal_gpio_write_to_pin(GPIOx, pin_no, 0);
}


void led_toggle(GPIO_TypeDef *GPIOx,uint32_t pin_no) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	if(hal_gpio_read_from_pin(GPIOx, pin_no))
 800021e:	6839      	ldr	r1, [r7, #0]
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f000 f8f9 	bl	8000418 <hal_gpio_read_from_pin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d005      	beq.n	8000238 <led_toggle+0x24>
		hal_gpio_write_to_pin(GPIOx, pin_no, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	6839      	ldr	r1, [r7, #0]
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 f906 	bl	8000442 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin_no, 1);
}
 8000236:	e004      	b.n	8000242 <led_toggle+0x2e>
		hal_gpio_write_to_pin(GPIOx, pin_no, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	6839      	ldr	r1, [r7, #0]
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f000 f900 	bl	8000442 <hal_gpio_write_to_pin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <main>:


int main(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	//uint32_t i;

	led_init();
 8000250:	f7ff ffc0 	bl	80001d4 <led_init>

	_HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x2c>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <main+0x2c>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_RISING_EDGE);
 8000260:	2100      	movs	r1, #0
 8000262:	200d      	movs	r0, #13
 8000264:	f000 f93a 	bl	80004dc <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI15_10_IRQn);
 8000268:	2128      	movs	r1, #40	; 0x28
 800026a:	200d      	movs	r0, #13
 800026c:	f000 f978 	bl	8000560 <hal_gpio_enable_interrupt>
 8000270:	2300      	movs	r3, #0
		for(i = 0; i < 300000; i++);

		led_turn_off(GPIOA, LED_GREEN);
		for(i = 0; i < 300000; i++);
	}*/
}
 8000272:	4618      	mov	r0, r3
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800

0800027c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8000280:	200d      	movs	r0, #13
 8000282:	f000 f989 	bl	8000598 <hal_gpio_clear_interrupt>
	led_toggle(GPIOA, LED_GREEN);
 8000286:	2105      	movs	r1, #5
 8000288:	4802      	ldr	r0, [pc, #8]	; (8000294 <EXTI15_10_IRQHandler+0x18>)
 800028a:	f7ff ffc3 	bl	8000214 <led_toggle>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020000 	.word	0x40020000

08000298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <SystemInit+0x28>)
 800029e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002a2:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <SystemInit+0x28>)
 80002a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <SystemInit+0x28>)
 80002ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b2:	609a      	str	r2, [r3, #8]
#endif
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ca:	e003      	b.n	80002d4 <LoopCopyDataInit>

080002cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002d2:	3104      	adds	r1, #4

080002d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002dc:	d3f6      	bcc.n	80002cc <CopyDataInit>
  ldr  r2, =_sbss
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002e0:	e002      	b.n	80002e8 <LoopFillZerobss>

080002e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002e4:	f842 3b04 	str.w	r3, [r2], #4

080002e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002ec:	d3f9      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ee:	f7ff ffd3 	bl	8000298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 f971 	bl	80005d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f6:	f7ff ffa9 	bl	800024c <main>
  bx  lr    
 80002fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002fc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000300:	08000640 	.word	0x08000640
  ldr  r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	2b00      	cmp	r3, #0
 8000328:	db0b      	blt.n	8000342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f003 021f 	and.w	r2, r3, #31
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <__NVIC_EnableIRQ+0x38>)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	2001      	movs	r0, #1
 800033a:	fa00 f202 	lsl.w	r2, r0, r2
 800033e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000e100 	.word	0xe000e100

08000354 <hal_gpio_configure_pin_mode>:
	* @param  pin_no : GPIO pin number
	* @param  mode   : mode to be configured
	* @retval None
	*/
void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint32_t pin_no, uint32_t mode)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
	GPIOx->MODER &= ~(0x03 << (2 * pin_no));
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	68ba      	ldr	r2, [r7, #8]
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	2103      	movs	r1, #3
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	431a      	orrs	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <hal_gpio_configure_pin_speed>:
	* @param  pin_no : GPIO pin number
	* @param  speed   : value of the speed
	* @retval None
	*/
void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint32_t pin_no, uint32_t speed)
{
 8000396:	b480      	push	{r7}
 8000398:	b085      	sub	sp, #20
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	689a      	ldr	r2, [r3, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	609a      	str	r2, [r3, #8]
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <hal_gpio_configure_pin_otype>:
	* @param  pin_no : GPIO pin number
	* @param  op_type   : output type to be configured with
	* @retval None
	*/
void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint32_t pin_no, uint32_t op_type)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b085      	sub	sp, #20
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	60f8      	str	r0, [r7, #12]
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]

	 GPIOx->OTYPER |= (op_type << pin_no);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	685a      	ldr	r2, [r3, #4]
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	431a      	orrs	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	605a      	str	r2, [r3, #4]

}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <hal_gpio_configure_pin_pupd>:
	* @param  pin_no : GPIO pin number
	* @param  pupd   : specifies which resistor to activate
	* @retval None
	*/
void hal_gpio_configure_pin_pupd(GPIO_TypeDef *GPIOx, uint32_t pin_no, uint32_t pupd)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	 GPIOx->PUPDR |= (pupd << (2 * pin_no));
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	68da      	ldr	r2, [r3, #12]
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]

}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <hal_gpio_read_from_pin>:
	* @param  *GPIOx : GPIO Port Base address
	* @param  pin_no : GPIO pin number
	* @retval uint8_t: Value read
	*/
uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx,uint32_t pin_no)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	uint8_t value;

	value = ((GPIOx->IDR >> pin_no) & 0x00000001);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	691a      	ldr	r2, [r3, #16]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	fa22 f303 	lsr.w	r3, r2, r3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]

	return value;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <hal_gpio_write_to_pin>:
	* @param  pin_no : GPIO pin number
	* @param  value   : value to be written
	* @retval None
	*/
void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx,uint32_t pin_no, uint8_t val)
{
 8000442:	b480      	push	{r7}
 8000444:	b085      	sub	sp, #20
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	4613      	mov	r3, r2
 800044e:	71fb      	strb	r3, [r7, #7]
	if(val)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d009      	beq.n	800046a <hal_gpio_write_to_pin+0x28>
		GPIOx->ODR |= (1 << pin_no);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	2101      	movs	r1, #1
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	431a      	orrs	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 8000468:	e009      	b.n	800047e <hal_gpio_write_to_pin+0x3c>
		GPIOx->ODR &= ~(1 << pin_no);
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	2101      	movs	r1, #1
 8000470:	68ba      	ldr	r2, [r7, #8]
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	43d2      	mvns	r2, r2
 8000478:	401a      	ands	r2, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	615a      	str	r2, [r3, #20]
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <hal_gpio_init>:
	* @brief  Initializes the gpio pin
	* @param  *GPIOx : GPIO Port Base address
	* @param  *gpio_pin_conf :Pointer to the pin conf structure sent by application
	* @retval None
	*/
void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	6819      	ldr	r1, [r3, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	461a      	mov	r2, r3
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff58 	bl	8000354 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->op_type);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	461a      	mov	r2, r3
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ff87 	bl	80003c2 <hal_gpio_configure_pin_otype>
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->speed);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	6819      	ldr	r1, [r3, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	461a      	mov	r2, r3
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff ff69 	bl	8000396 <hal_gpio_configure_pin_speed>
	hal_gpio_configure_pin_pupd(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->pull);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	6819      	ldr	r1, [r3, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	461a      	mov	r2, r3
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff ff8c 	bl	80003ec <hal_gpio_configure_pin_pupd>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <hal_gpio_configure_interrupt>:
	* @brief  Configure the interrupt for a given pin number
	* @param  pin_no : GPIO pin number
	* @param  edge_sel   :  Triggering edge slection value of type "int_edge_sel_t"
	* @retval None
	*/
void hal_gpio_configure_interrupt(uint32_t pin_no, int_edge_sel_t edge_sel) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
	if(edge_sel == INT_RISING_EDGE) {
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d10a      	bne.n	8000504 <hal_gpio_configure_interrupt+0x28>
		EXTI->RTSR |= (0x01 << pin_no);
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	2101      	movs	r1, #1
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0x01 << pin_no);
		EXTI->FTSR |= (0x01 << pin_no);
	} else {

	}
}
 8000502:	e024      	b.n	800054e <hal_gpio_configure_interrupt+0x72>
	} else if(edge_sel == INT_FALLING_EDGE) {
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d10a      	bne.n	8000520 <hal_gpio_configure_interrupt+0x44>
		EXTI->FTSR |= (0x01 << pin_no);
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	2101      	movs	r1, #1
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 800051a:	430b      	orrs	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
}
 800051e:	e016      	b.n	800054e <hal_gpio_configure_interrupt+0x72>
	} else if(edge_sel == INT_RISING_FALLING_EDGE) {
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d113      	bne.n	800054e <hal_gpio_configure_interrupt+0x72>
		EXTI->RTSR |= (0x01 << pin_no);
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2101      	movs	r1, #1
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	4611      	mov	r1, r2
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 8000536:	430b      	orrs	r3, r1
 8000538:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0x01 << pin_no);
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	2101      	movs	r1, #1
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <hal_gpio_configure_interrupt+0x80>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40013c00 	.word	0x40013c00

08000560 <hal_gpio_enable_interrupt>:
	* @brief  Enable the interrupt for a give pin number and irq number
	* @param  pin_no : GPIO pin number
	* @param  irq_no   :  irq_number to be enabled in NVIC
	* @retval None
	*/
void hal_gpio_enable_interrupt(uint32_t pin_no, IRQn_Type irq_no) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
	EXTI->IMR |= (1 << pin_no);
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <hal_gpio_enable_interrupt+0x34>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2101      	movs	r1, #1
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	4611      	mov	r1, r2
 800057a:	4a06      	ldr	r2, [pc, #24]	; (8000594 <hal_gpio_enable_interrupt+0x34>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 8000580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fec7 	bl	8000318 <__NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40013c00 	.word	0x40013c00

08000598 <hal_gpio_clear_interrupt>:
/**
	* @brief  Clear the sticky interrupt pending bit if set
	* @param  pin_no : GPIO pin number
	* @retval None
	*/
void 	hal_gpio_clear_interrupt(uint32_t pin) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(EXTI->PR & (1 << pin)) {
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <hal_gpio_clear_interrupt+0x3c>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	2101      	movs	r1, #1
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d009      	beq.n	80005c6 <hal_gpio_clear_interrupt+0x2e>
		EXTI->PR |= (1 << pin);
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <hal_gpio_clear_interrupt+0x3c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2101      	movs	r1, #1
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <hal_gpio_clear_interrupt+0x3c>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6153      	str	r3, [r2, #20]
	}
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40013c00 	.word	0x40013c00

080005d8 <__libc_init_array>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	4e0d      	ldr	r6, [pc, #52]	; (8000610 <__libc_init_array+0x38>)
 80005dc:	4c0d      	ldr	r4, [pc, #52]	; (8000614 <__libc_init_array+0x3c>)
 80005de:	1ba4      	subs	r4, r4, r6
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	2500      	movs	r5, #0
 80005e4:	42a5      	cmp	r5, r4
 80005e6:	d109      	bne.n	80005fc <__libc_init_array+0x24>
 80005e8:	4e0b      	ldr	r6, [pc, #44]	; (8000618 <__libc_init_array+0x40>)
 80005ea:	4c0c      	ldr	r4, [pc, #48]	; (800061c <__libc_init_array+0x44>)
 80005ec:	f000 f818 	bl	8000620 <_init>
 80005f0:	1ba4      	subs	r4, r4, r6
 80005f2:	10a4      	asrs	r4, r4, #2
 80005f4:	2500      	movs	r5, #0
 80005f6:	42a5      	cmp	r5, r4
 80005f8:	d105      	bne.n	8000606 <__libc_init_array+0x2e>
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000600:	4798      	blx	r3
 8000602:	3501      	adds	r5, #1
 8000604:	e7ee      	b.n	80005e4 <__libc_init_array+0xc>
 8000606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800060a:	4798      	blx	r3
 800060c:	3501      	adds	r5, #1
 800060e:	e7f2      	b.n	80005f6 <__libc_init_array+0x1e>
 8000610:	08000638 	.word	0x08000638
 8000614:	08000638 	.word	0x08000638
 8000618:	08000638 	.word	0x08000638
 800061c:	0800063c 	.word	0x0800063c

08000620 <_init>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr

0800062c <_fini>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr
