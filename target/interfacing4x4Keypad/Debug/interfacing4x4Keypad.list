
interfacing4x4Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ffc  08000ffc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000ffc  08000ffc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ffc  08000ffc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001068  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001068  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021a2  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005f3  00000000  00000000  00022230  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  00022828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00022948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a8c  00000000  00000000  00022a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000130b  00000000  00000000  000254bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000910f  00000000  00000000  000267c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f8d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000950  00000000  00000000  0002f954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f40 	.word	0x08000f40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08000f40 	.word	0x08000f40

080001d4 <delay>:
#endif

#include <stdio.h>
#include <stdint.h>

void delay (void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 300000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <delay+0x24>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	ddf8      	ble.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	000493df 	.word	0x000493df

080001fc <main>:

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0
	uint32_t volatile *const pClkCtrlReg = (uint32_t*) 0x40023830;
 8000202:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <main+0x1ec>)
 8000204:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pPortCModeReg = (uint32_t*) 0x40020800;
 8000206:	4b79      	ldr	r3, [pc, #484]	; (80003ec <main+0x1f0>)
 8000208:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pPortCOutReg = (uint32_t*) 0x40020814;
 800020a:	4b79      	ldr	r3, [pc, #484]	; (80003f0 <main+0x1f4>)
 800020c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pPortCInReg = (uint32_t*) 0x40020810;
 800020e:	4b79      	ldr	r3, [pc, #484]	; (80003f4 <main+0x1f8>)
 8000210:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pPortCpUpDReg = (uint32_t*) 0x4002080C;
 8000212:	4b79      	ldr	r3, [pc, #484]	; (80003f8 <main+0x1fc>)
 8000214:	60bb      	str	r3, [r7, #8]

	*pClkCtrlReg |= (0 << 2); // 1 for enabling clk for port c
 8000216:	69bb      	ldr	r3, [r7, #24]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	69bb      	ldr	r3, [r7, #24]
 800021c:	601a      	str	r2, [r3, #0]

	*pPortCModeReg &= 0xFFFF0000;
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	0c1b      	lsrs	r3, r3, #16
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	697a      	ldr	r2, [r7, #20]
 8000228:	6013      	str	r3, [r2, #0]
	*pPortCModeReg |= 0x00000055;
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	601a      	str	r2, [r3, #0]

	*pPortCpUpDReg &= 0xFFFF0000;
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	041b      	lsls	r3, r3, #16
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	6013      	str	r3, [r2, #0]
	*pPortCpUpDReg |= 0xFFFF5500;
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b6d      	ldr	r3, [pc, #436]	; (80003fc <main+0x200>)
 8000248:	4313      	orrs	r3, r2
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	6013      	str	r3, [r2, #0]

	uint8_t pinStatus;
	int i;
	while(1) {

		for (i = 0; i < 4; i++) {
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
 8000252:	e0c2      	b.n	80003da <main+0x1de>

			*pPortCOutReg |= (15 << 0);
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f043 020f 	orr.w	r2, r3, #15
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	601a      	str	r2, [r3, #0]
			*pPortCOutReg = *pPortCOutReg &~ (1 << i);
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2101      	movs	r1, #1
 8000266:	69fa      	ldr	r2, [r7, #28]
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	43d2      	mvns	r2, r2
 800026e:	401a      	ands	r2, r3
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	601a      	str	r2, [r3, #0]

			pinStatus = (uint8_t) *pPortCInReg & (1 << 4);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0310 	and.w	r3, r3, #16
 800027e:	71fb      	strb	r3, [r7, #7]
			if (!pinStatus) {
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d122      	bne.n	80002cc <main+0xd0>
				if (i == 0) {
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d105      	bne.n	8000298 <main+0x9c>
					delay();
 800028c:	f7ff ffa2 	bl	80001d4 <delay>
					printf("1\n");
 8000290:	485b      	ldr	r0, [pc, #364]	; (8000400 <main+0x204>)
 8000292:	f000 fa49 	bl	8000728 <puts>
 8000296:	e019      	b.n	80002cc <main+0xd0>
				} else if (i == 1) {
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d105      	bne.n	80002aa <main+0xae>
					delay();
 800029e:	f7ff ff99 	bl	80001d4 <delay>
					printf("4\n");
 80002a2:	4858      	ldr	r0, [pc, #352]	; (8000404 <main+0x208>)
 80002a4:	f000 fa40 	bl	8000728 <puts>
 80002a8:	e010      	b.n	80002cc <main+0xd0>
				} else if (i == 2) {
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d105      	bne.n	80002bc <main+0xc0>
					delay();
 80002b0:	f7ff ff90 	bl	80001d4 <delay>
					printf("7\n");
 80002b4:	4854      	ldr	r0, [pc, #336]	; (8000408 <main+0x20c>)
 80002b6:	f000 fa37 	bl	8000728 <puts>
 80002ba:	e007      	b.n	80002cc <main+0xd0>
				} else if (i == 3) {
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d104      	bne.n	80002cc <main+0xd0>
					delay();
 80002c2:	f7ff ff87 	bl	80001d4 <delay>
					printf("*\n");
 80002c6:	4851      	ldr	r0, [pc, #324]	; (800040c <main+0x210>)
 80002c8:	f000 fa2e 	bl	8000728 <puts>
				}
			}


			pinStatus = (uint8_t) *pPortCInReg & (1 << 5);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0320 	and.w	r3, r3, #32
 80002d6:	71fb      	strb	r3, [r7, #7]
			if (!pinStatus) {
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d122      	bne.n	8000324 <main+0x128>
				if (i == 0) {
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d105      	bne.n	80002f0 <main+0xf4>
					delay();
 80002e4:	f7ff ff76 	bl	80001d4 <delay>
					printf("2\n");
 80002e8:	4849      	ldr	r0, [pc, #292]	; (8000410 <main+0x214>)
 80002ea:	f000 fa1d 	bl	8000728 <puts>
 80002ee:	e019      	b.n	8000324 <main+0x128>
				} else if (i == 1) {
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d105      	bne.n	8000302 <main+0x106>
					delay();
 80002f6:	f7ff ff6d 	bl	80001d4 <delay>
					printf("5\n");
 80002fa:	4846      	ldr	r0, [pc, #280]	; (8000414 <main+0x218>)
 80002fc:	f000 fa14 	bl	8000728 <puts>
 8000300:	e010      	b.n	8000324 <main+0x128>
				} else if (i == 2) {
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d105      	bne.n	8000314 <main+0x118>
					delay();
 8000308:	f7ff ff64 	bl	80001d4 <delay>
					printf("8\n");
 800030c:	4842      	ldr	r0, [pc, #264]	; (8000418 <main+0x21c>)
 800030e:	f000 fa0b 	bl	8000728 <puts>
 8000312:	e007      	b.n	8000324 <main+0x128>
				} else if (i == 3) {
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	2b03      	cmp	r3, #3
 8000318:	d104      	bne.n	8000324 <main+0x128>
					delay();
 800031a:	f7ff ff5b 	bl	80001d4 <delay>
					printf("0\n");
 800031e:	483f      	ldr	r0, [pc, #252]	; (800041c <main+0x220>)
 8000320:	f000 fa02 	bl	8000728 <puts>
				}
			}


			pinStatus = (uint8_t) *pPortCInReg & (1 << 6);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800032e:	71fb      	strb	r3, [r7, #7]
			if (!pinStatus) {
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d122      	bne.n	800037c <main+0x180>
				if (i == 0) {
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d105      	bne.n	8000348 <main+0x14c>
					delay();
 800033c:	f7ff ff4a 	bl	80001d4 <delay>
					printf("3\n");
 8000340:	4837      	ldr	r0, [pc, #220]	; (8000420 <main+0x224>)
 8000342:	f000 f9f1 	bl	8000728 <puts>
 8000346:	e019      	b.n	800037c <main+0x180>
				} else if (i == 1) {
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d105      	bne.n	800035a <main+0x15e>
					delay();
 800034e:	f7ff ff41 	bl	80001d4 <delay>
					printf("6\n");
 8000352:	4834      	ldr	r0, [pc, #208]	; (8000424 <main+0x228>)
 8000354:	f000 f9e8 	bl	8000728 <puts>
 8000358:	e010      	b.n	800037c <main+0x180>
				} else if (i == 2) {
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d105      	bne.n	800036c <main+0x170>
					delay();
 8000360:	f7ff ff38 	bl	80001d4 <delay>
					printf("9\n");
 8000364:	4830      	ldr	r0, [pc, #192]	; (8000428 <main+0x22c>)
 8000366:	f000 f9df 	bl	8000728 <puts>
 800036a:	e007      	b.n	800037c <main+0x180>
				} else if (i == 3) {
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	2b03      	cmp	r3, #3
 8000370:	d104      	bne.n	800037c <main+0x180>
					delay();
 8000372:	f7ff ff2f 	bl	80001d4 <delay>
					printf("#\n");
 8000376:	482d      	ldr	r0, [pc, #180]	; (800042c <main+0x230>)
 8000378:	f000 f9d6 	bl	8000728 <puts>
				}
			}


			pinStatus = (uint8_t) *pPortCInReg & (1 << 7);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000386:	71fb      	strb	r3, [r7, #7]
			if (!pinStatus) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d122      	bne.n	80003d4 <main+0x1d8>
				if (i == 0) {
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d105      	bne.n	80003a0 <main+0x1a4>
					delay();
 8000394:	f7ff ff1e 	bl	80001d4 <delay>
					printf("A\n");
 8000398:	4825      	ldr	r0, [pc, #148]	; (8000430 <main+0x234>)
 800039a:	f000 f9c5 	bl	8000728 <puts>
 800039e:	e019      	b.n	80003d4 <main+0x1d8>
				} else if (i == 1) {
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d105      	bne.n	80003b2 <main+0x1b6>
					delay();
 80003a6:	f7ff ff15 	bl	80001d4 <delay>
					printf("B\n");
 80003aa:	4822      	ldr	r0, [pc, #136]	; (8000434 <main+0x238>)
 80003ac:	f000 f9bc 	bl	8000728 <puts>
 80003b0:	e010      	b.n	80003d4 <main+0x1d8>
				} else if (i == 2) {
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d105      	bne.n	80003c4 <main+0x1c8>
					delay();
 80003b8:	f7ff ff0c 	bl	80001d4 <delay>
					printf("C\n");
 80003bc:	481e      	ldr	r0, [pc, #120]	; (8000438 <main+0x23c>)
 80003be:	f000 f9b3 	bl	8000728 <puts>
 80003c2:	e007      	b.n	80003d4 <main+0x1d8>
				} else if (i == 3) {
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d104      	bne.n	80003d4 <main+0x1d8>
					delay();
 80003ca:	f7ff ff03 	bl	80001d4 <delay>
					printf("D\n");
 80003ce:	481b      	ldr	r0, [pc, #108]	; (800043c <main+0x240>)
 80003d0:	f000 f9aa 	bl	8000728 <puts>
		for (i = 0; i < 4; i++) {
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	3301      	adds	r3, #1
 80003d8:	61fb      	str	r3, [r7, #28]
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	f77f af39 	ble.w	8000254 <main+0x58>
				}
			}
		}

		i = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < 4; i++) {
 80003e6:	e732      	b.n	800024e <main+0x52>
 80003e8:	40023830 	.word	0x40023830
 80003ec:	40020800 	.word	0x40020800
 80003f0:	40020814 	.word	0x40020814
 80003f4:	40020810 	.word	0x40020810
 80003f8:	4002080c 	.word	0x4002080c
 80003fc:	ffff5500 	.word	0xffff5500
 8000400:	08000f58 	.word	0x08000f58
 8000404:	08000f5c 	.word	0x08000f5c
 8000408:	08000f60 	.word	0x08000f60
 800040c:	08000f64 	.word	0x08000f64
 8000410:	08000f68 	.word	0x08000f68
 8000414:	08000f6c 	.word	0x08000f6c
 8000418:	08000f70 	.word	0x08000f70
 800041c:	08000f74 	.word	0x08000f74
 8000420:	08000f78 	.word	0x08000f78
 8000424:	08000f7c 	.word	0x08000f7c
 8000428:	08000f80 	.word	0x08000f80
 800042c:	08000f84 	.word	0x08000f84
 8000430:	08000f88 	.word	0x08000f88
 8000434:	08000f8c 	.word	0x08000f8c
 8000438:	08000f90 	.word	0x08000f90
 800043c:	08000f94 	.word	0x08000f94

08000440 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <ITM_SendChar+0x44>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <ITM_SendChar+0x44>)
 8000450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000454:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <ITM_SendChar+0x48>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <ITM_SendChar+0x48>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000462:	bf00      	nop
 8000464:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000472:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	e000edfc 	.word	0xe000edfc
 8000488:	e0000e00 	.word	0xe0000e00

0800048c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e00a      	b.n	80004b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800049e:	f3af 8000 	nop.w
 80004a2:	4601      	mov	r1, r0
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	b2ca      	uxtb	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf0      	blt.n	800049e <_read+0x12>
	}

return len;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e009      	b.n	80004ec <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ffad 	bl	8000440 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbf1      	blt.n	80004d8 <_write+0x12>
	}
	return len;
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_close>:

int _close(int file)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	return -1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000524:	605a      	str	r2, [r3, #4]
	return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <_isatty>:

int _isatty(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
	return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
	return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <_sbrk+0x50>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x16>
		heap_end = &end;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <_sbrk+0x50>)
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <_sbrk+0x54>)
 8000574:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <_sbrk+0x50>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <_sbrk+0x50>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	466a      	mov	r2, sp
 8000586:	4293      	cmp	r3, r2
 8000588:	d907      	bls.n	800059a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800058a:	f000 f83f 	bl	800060c <__errno>
 800058e:	4602      	mov	r2, r0
 8000590:	230c      	movs	r3, #12
 8000592:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	e006      	b.n	80005a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <_sbrk+0x50>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <_sbrk+0x50>)
 80005a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000080 	.word	0x20000080
 80005b4:	20000090 	.word	0x20000090

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490e      	ldr	r1, [pc, #56]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0b      	ldr	r4, [pc, #44]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005e2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 f817 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe07 	bl	80001fc <main>

080005ee <LoopForever>:

LoopForever:
    b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005fc:	08001004 	.word	0x08001004
  ldr r2, =_sbss
 8000600:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000604:	20000090 	.word	0x20000090

08000608 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <__errno>:
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <__errno+0x8>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4e0d      	ldr	r6, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1ba4      	subs	r4, r4, r6
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2500      	movs	r5, #0
 8000624:	42a5      	cmp	r5, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4e0b      	ldr	r6, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 fc88 	bl	8000f40 <_init>
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2500      	movs	r5, #0
 8000636:	42a5      	cmp	r5, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000640:	4798      	blx	r3
 8000642:	3501      	adds	r5, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800064a:	4798      	blx	r3
 800064c:	3501      	adds	r5, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000ffc 	.word	0x08000ffc
 8000654:	08000ffc 	.word	0x08000ffc
 8000658:	08000ffc 	.word	0x08000ffc
 800065c:	08001000 	.word	0x08001000

08000660 <memset>:
 8000660:	4402      	add	r2, r0
 8000662:	4603      	mov	r3, r0
 8000664:	4293      	cmp	r3, r2
 8000666:	d100      	bne.n	800066a <memset+0xa>
 8000668:	4770      	bx	lr
 800066a:	f803 1b01 	strb.w	r1, [r3], #1
 800066e:	e7f9      	b.n	8000664 <memset+0x4>

08000670 <_puts_r>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	460e      	mov	r6, r1
 8000674:	4605      	mov	r5, r0
 8000676:	b118      	cbz	r0, 8000680 <_puts_r+0x10>
 8000678:	6983      	ldr	r3, [r0, #24]
 800067a:	b90b      	cbnz	r3, 8000680 <_puts_r+0x10>
 800067c:	f000 fa0c 	bl	8000a98 <__sinit>
 8000680:	69ab      	ldr	r3, [r5, #24]
 8000682:	68ac      	ldr	r4, [r5, #8]
 8000684:	b913      	cbnz	r3, 800068c <_puts_r+0x1c>
 8000686:	4628      	mov	r0, r5
 8000688:	f000 fa06 	bl	8000a98 <__sinit>
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <_puts_r+0xac>)
 800068e:	429c      	cmp	r4, r3
 8000690:	d117      	bne.n	80006c2 <_puts_r+0x52>
 8000692:	686c      	ldr	r4, [r5, #4]
 8000694:	89a3      	ldrh	r3, [r4, #12]
 8000696:	071b      	lsls	r3, r3, #28
 8000698:	d51d      	bpl.n	80006d6 <_puts_r+0x66>
 800069a:	6923      	ldr	r3, [r4, #16]
 800069c:	b1db      	cbz	r3, 80006d6 <_puts_r+0x66>
 800069e:	3e01      	subs	r6, #1
 80006a0:	68a3      	ldr	r3, [r4, #8]
 80006a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006a6:	3b01      	subs	r3, #1
 80006a8:	60a3      	str	r3, [r4, #8]
 80006aa:	b9e9      	cbnz	r1, 80006e8 <_puts_r+0x78>
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da2e      	bge.n	800070e <_puts_r+0x9e>
 80006b0:	4622      	mov	r2, r4
 80006b2:	210a      	movs	r1, #10
 80006b4:	4628      	mov	r0, r5
 80006b6:	f000 f83f 	bl	8000738 <__swbuf_r>
 80006ba:	3001      	adds	r0, #1
 80006bc:	d011      	beq.n	80006e2 <_puts_r+0x72>
 80006be:	200a      	movs	r0, #10
 80006c0:	e011      	b.n	80006e6 <_puts_r+0x76>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <_puts_r+0xb0>)
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d101      	bne.n	80006cc <_puts_r+0x5c>
 80006c8:	68ac      	ldr	r4, [r5, #8]
 80006ca:	e7e3      	b.n	8000694 <_puts_r+0x24>
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <_puts_r+0xb4>)
 80006ce:	429c      	cmp	r4, r3
 80006d0:	bf08      	it	eq
 80006d2:	68ec      	ldreq	r4, [r5, #12]
 80006d4:	e7de      	b.n	8000694 <_puts_r+0x24>
 80006d6:	4621      	mov	r1, r4
 80006d8:	4628      	mov	r0, r5
 80006da:	f000 f87f 	bl	80007dc <__swsetup_r>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d0dd      	beq.n	800069e <_puts_r+0x2e>
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	da04      	bge.n	80006f6 <_puts_r+0x86>
 80006ec:	69a2      	ldr	r2, [r4, #24]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	dc06      	bgt.n	8000700 <_puts_r+0x90>
 80006f2:	290a      	cmp	r1, #10
 80006f4:	d004      	beq.n	8000700 <_puts_r+0x90>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	6022      	str	r2, [r4, #0]
 80006fc:	7019      	strb	r1, [r3, #0]
 80006fe:	e7cf      	b.n	80006a0 <_puts_r+0x30>
 8000700:	4622      	mov	r2, r4
 8000702:	4628      	mov	r0, r5
 8000704:	f000 f818 	bl	8000738 <__swbuf_r>
 8000708:	3001      	adds	r0, #1
 800070a:	d1c9      	bne.n	80006a0 <_puts_r+0x30>
 800070c:	e7e9      	b.n	80006e2 <_puts_r+0x72>
 800070e:	6823      	ldr	r3, [r4, #0]
 8000710:	200a      	movs	r0, #10
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	6022      	str	r2, [r4, #0]
 8000716:	7018      	strb	r0, [r3, #0]
 8000718:	e7e5      	b.n	80006e6 <_puts_r+0x76>
 800071a:	bf00      	nop
 800071c:	08000fbc 	.word	0x08000fbc
 8000720:	08000fdc 	.word	0x08000fdc
 8000724:	08000f9c 	.word	0x08000f9c

08000728 <puts>:
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <puts+0xc>)
 800072a:	4601      	mov	r1, r0
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f7ff bf9f 	b.w	8000670 <_puts_r>
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <__swbuf_r>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	460e      	mov	r6, r1
 800073c:	4614      	mov	r4, r2
 800073e:	4605      	mov	r5, r0
 8000740:	b118      	cbz	r0, 800074a <__swbuf_r+0x12>
 8000742:	6983      	ldr	r3, [r0, #24]
 8000744:	b90b      	cbnz	r3, 800074a <__swbuf_r+0x12>
 8000746:	f000 f9a7 	bl	8000a98 <__sinit>
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <__swbuf_r+0x98>)
 800074c:	429c      	cmp	r4, r3
 800074e:	d12a      	bne.n	80007a6 <__swbuf_r+0x6e>
 8000750:	686c      	ldr	r4, [r5, #4]
 8000752:	69a3      	ldr	r3, [r4, #24]
 8000754:	60a3      	str	r3, [r4, #8]
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	071a      	lsls	r2, r3, #28
 800075a:	d52e      	bpl.n	80007ba <__swbuf_r+0x82>
 800075c:	6923      	ldr	r3, [r4, #16]
 800075e:	b363      	cbz	r3, 80007ba <__swbuf_r+0x82>
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	6820      	ldr	r0, [r4, #0]
 8000764:	1ac0      	subs	r0, r0, r3
 8000766:	6963      	ldr	r3, [r4, #20]
 8000768:	b2f6      	uxtb	r6, r6
 800076a:	4283      	cmp	r3, r0
 800076c:	4637      	mov	r7, r6
 800076e:	dc04      	bgt.n	800077a <__swbuf_r+0x42>
 8000770:	4621      	mov	r1, r4
 8000772:	4628      	mov	r0, r5
 8000774:	f000 f926 	bl	80009c4 <_fflush_r>
 8000778:	bb28      	cbnz	r0, 80007c6 <__swbuf_r+0x8e>
 800077a:	68a3      	ldr	r3, [r4, #8]
 800077c:	3b01      	subs	r3, #1
 800077e:	60a3      	str	r3, [r4, #8]
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	6022      	str	r2, [r4, #0]
 8000786:	701e      	strb	r6, [r3, #0]
 8000788:	6963      	ldr	r3, [r4, #20]
 800078a:	3001      	adds	r0, #1
 800078c:	4283      	cmp	r3, r0
 800078e:	d004      	beq.n	800079a <__swbuf_r+0x62>
 8000790:	89a3      	ldrh	r3, [r4, #12]
 8000792:	07db      	lsls	r3, r3, #31
 8000794:	d519      	bpl.n	80007ca <__swbuf_r+0x92>
 8000796:	2e0a      	cmp	r6, #10
 8000798:	d117      	bne.n	80007ca <__swbuf_r+0x92>
 800079a:	4621      	mov	r1, r4
 800079c:	4628      	mov	r0, r5
 800079e:	f000 f911 	bl	80009c4 <_fflush_r>
 80007a2:	b190      	cbz	r0, 80007ca <__swbuf_r+0x92>
 80007a4:	e00f      	b.n	80007c6 <__swbuf_r+0x8e>
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <__swbuf_r+0x9c>)
 80007a8:	429c      	cmp	r4, r3
 80007aa:	d101      	bne.n	80007b0 <__swbuf_r+0x78>
 80007ac:	68ac      	ldr	r4, [r5, #8]
 80007ae:	e7d0      	b.n	8000752 <__swbuf_r+0x1a>
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <__swbuf_r+0xa0>)
 80007b2:	429c      	cmp	r4, r3
 80007b4:	bf08      	it	eq
 80007b6:	68ec      	ldreq	r4, [r5, #12]
 80007b8:	e7cb      	b.n	8000752 <__swbuf_r+0x1a>
 80007ba:	4621      	mov	r1, r4
 80007bc:	4628      	mov	r0, r5
 80007be:	f000 f80d 	bl	80007dc <__swsetup_r>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d0cc      	beq.n	8000760 <__swbuf_r+0x28>
 80007c6:	f04f 37ff 	mov.w	r7, #4294967295
 80007ca:	4638      	mov	r0, r7
 80007cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08000fbc 	.word	0x08000fbc
 80007d4:	08000fdc 	.word	0x08000fdc
 80007d8:	08000f9c 	.word	0x08000f9c

080007dc <__swsetup_r>:
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <__swsetup_r+0xcc>)
 80007de:	b570      	push	{r4, r5, r6, lr}
 80007e0:	681d      	ldr	r5, [r3, #0]
 80007e2:	4606      	mov	r6, r0
 80007e4:	460c      	mov	r4, r1
 80007e6:	b125      	cbz	r5, 80007f2 <__swsetup_r+0x16>
 80007e8:	69ab      	ldr	r3, [r5, #24]
 80007ea:	b913      	cbnz	r3, 80007f2 <__swsetup_r+0x16>
 80007ec:	4628      	mov	r0, r5
 80007ee:	f000 f953 	bl	8000a98 <__sinit>
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <__swsetup_r+0xd0>)
 80007f4:	429c      	cmp	r4, r3
 80007f6:	d10f      	bne.n	8000818 <__swsetup_r+0x3c>
 80007f8:	686c      	ldr	r4, [r5, #4]
 80007fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	0715      	lsls	r5, r2, #28
 8000802:	d42c      	bmi.n	800085e <__swsetup_r+0x82>
 8000804:	06d0      	lsls	r0, r2, #27
 8000806:	d411      	bmi.n	800082c <__swsetup_r+0x50>
 8000808:	2209      	movs	r2, #9
 800080a:	6032      	str	r2, [r6, #0]
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	81a3      	strh	r3, [r4, #12]
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	e03e      	b.n	8000896 <__swsetup_r+0xba>
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <__swsetup_r+0xd4>)
 800081a:	429c      	cmp	r4, r3
 800081c:	d101      	bne.n	8000822 <__swsetup_r+0x46>
 800081e:	68ac      	ldr	r4, [r5, #8]
 8000820:	e7eb      	b.n	80007fa <__swsetup_r+0x1e>
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <__swsetup_r+0xd8>)
 8000824:	429c      	cmp	r4, r3
 8000826:	bf08      	it	eq
 8000828:	68ec      	ldreq	r4, [r5, #12]
 800082a:	e7e6      	b.n	80007fa <__swsetup_r+0x1e>
 800082c:	0751      	lsls	r1, r2, #29
 800082e:	d512      	bpl.n	8000856 <__swsetup_r+0x7a>
 8000830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000832:	b141      	cbz	r1, 8000846 <__swsetup_r+0x6a>
 8000834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000838:	4299      	cmp	r1, r3
 800083a:	d002      	beq.n	8000842 <__swsetup_r+0x66>
 800083c:	4630      	mov	r0, r6
 800083e:	f000 fa19 	bl	8000c74 <_free_r>
 8000842:	2300      	movs	r3, #0
 8000844:	6363      	str	r3, [r4, #52]	; 0x34
 8000846:	89a3      	ldrh	r3, [r4, #12]
 8000848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800084c:	81a3      	strh	r3, [r4, #12]
 800084e:	2300      	movs	r3, #0
 8000850:	6063      	str	r3, [r4, #4]
 8000852:	6923      	ldr	r3, [r4, #16]
 8000854:	6023      	str	r3, [r4, #0]
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	81a3      	strh	r3, [r4, #12]
 800085e:	6923      	ldr	r3, [r4, #16]
 8000860:	b94b      	cbnz	r3, 8000876 <__swsetup_r+0x9a>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086c:	d003      	beq.n	8000876 <__swsetup_r+0x9a>
 800086e:	4621      	mov	r1, r4
 8000870:	4630      	mov	r0, r6
 8000872:	f000 f9bf 	bl	8000bf4 <__smakebuf_r>
 8000876:	89a2      	ldrh	r2, [r4, #12]
 8000878:	f012 0301 	ands.w	r3, r2, #1
 800087c:	d00c      	beq.n	8000898 <__swsetup_r+0xbc>
 800087e:	2300      	movs	r3, #0
 8000880:	60a3      	str	r3, [r4, #8]
 8000882:	6963      	ldr	r3, [r4, #20]
 8000884:	425b      	negs	r3, r3
 8000886:	61a3      	str	r3, [r4, #24]
 8000888:	6923      	ldr	r3, [r4, #16]
 800088a:	b953      	cbnz	r3, 80008a2 <__swsetup_r+0xc6>
 800088c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000890:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000894:	d1ba      	bne.n	800080c <__swsetup_r+0x30>
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	0792      	lsls	r2, r2, #30
 800089a:	bf58      	it	pl
 800089c:	6963      	ldrpl	r3, [r4, #20]
 800089e:	60a3      	str	r3, [r4, #8]
 80008a0:	e7f2      	b.n	8000888 <__swsetup_r+0xac>
 80008a2:	2000      	movs	r0, #0
 80008a4:	e7f7      	b.n	8000896 <__swsetup_r+0xba>
 80008a6:	bf00      	nop
 80008a8:	20000000 	.word	0x20000000
 80008ac:	08000fbc 	.word	0x08000fbc
 80008b0:	08000fdc 	.word	0x08000fdc
 80008b4:	08000f9c 	.word	0x08000f9c

080008b8 <__sflush_r>:
 80008b8:	898a      	ldrh	r2, [r1, #12]
 80008ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	4605      	mov	r5, r0
 80008c0:	0710      	lsls	r0, r2, #28
 80008c2:	460c      	mov	r4, r1
 80008c4:	d458      	bmi.n	8000978 <__sflush_r+0xc0>
 80008c6:	684b      	ldr	r3, [r1, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dc05      	bgt.n	80008d8 <__sflush_r+0x20>
 80008cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	dc02      	bgt.n	80008d8 <__sflush_r+0x20>
 80008d2:	2000      	movs	r0, #0
 80008d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d0f9      	beq.n	80008d2 <__sflush_r+0x1a>
 80008de:	2300      	movs	r3, #0
 80008e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008e4:	682f      	ldr	r7, [r5, #0]
 80008e6:	6a21      	ldr	r1, [r4, #32]
 80008e8:	602b      	str	r3, [r5, #0]
 80008ea:	d032      	beq.n	8000952 <__sflush_r+0x9a>
 80008ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	075a      	lsls	r2, r3, #29
 80008f2:	d505      	bpl.n	8000900 <__sflush_r+0x48>
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	1ac0      	subs	r0, r0, r3
 80008f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008fa:	b10b      	cbz	r3, 8000900 <__sflush_r+0x48>
 80008fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008fe:	1ac0      	subs	r0, r0, r3
 8000900:	2300      	movs	r3, #0
 8000902:	4602      	mov	r2, r0
 8000904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000906:	6a21      	ldr	r1, [r4, #32]
 8000908:	4628      	mov	r0, r5
 800090a:	47b0      	blx	r6
 800090c:	1c43      	adds	r3, r0, #1
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	d106      	bne.n	8000920 <__sflush_r+0x68>
 8000912:	6829      	ldr	r1, [r5, #0]
 8000914:	291d      	cmp	r1, #29
 8000916:	d848      	bhi.n	80009aa <__sflush_r+0xf2>
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <__sflush_r+0x108>)
 800091a:	40ca      	lsrs	r2, r1
 800091c:	07d6      	lsls	r6, r2, #31
 800091e:	d544      	bpl.n	80009aa <__sflush_r+0xf2>
 8000920:	2200      	movs	r2, #0
 8000922:	6062      	str	r2, [r4, #4]
 8000924:	04d9      	lsls	r1, r3, #19
 8000926:	6922      	ldr	r2, [r4, #16]
 8000928:	6022      	str	r2, [r4, #0]
 800092a:	d504      	bpl.n	8000936 <__sflush_r+0x7e>
 800092c:	1c42      	adds	r2, r0, #1
 800092e:	d101      	bne.n	8000934 <__sflush_r+0x7c>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b903      	cbnz	r3, 8000936 <__sflush_r+0x7e>
 8000934:	6560      	str	r0, [r4, #84]	; 0x54
 8000936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000938:	602f      	str	r7, [r5, #0]
 800093a:	2900      	cmp	r1, #0
 800093c:	d0c9      	beq.n	80008d2 <__sflush_r+0x1a>
 800093e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000942:	4299      	cmp	r1, r3
 8000944:	d002      	beq.n	800094c <__sflush_r+0x94>
 8000946:	4628      	mov	r0, r5
 8000948:	f000 f994 	bl	8000c74 <_free_r>
 800094c:	2000      	movs	r0, #0
 800094e:	6360      	str	r0, [r4, #52]	; 0x34
 8000950:	e7c0      	b.n	80008d4 <__sflush_r+0x1c>
 8000952:	2301      	movs	r3, #1
 8000954:	4628      	mov	r0, r5
 8000956:	47b0      	blx	r6
 8000958:	1c41      	adds	r1, r0, #1
 800095a:	d1c8      	bne.n	80008ee <__sflush_r+0x36>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0c5      	beq.n	80008ee <__sflush_r+0x36>
 8000962:	2b1d      	cmp	r3, #29
 8000964:	d001      	beq.n	800096a <__sflush_r+0xb2>
 8000966:	2b16      	cmp	r3, #22
 8000968:	d101      	bne.n	800096e <__sflush_r+0xb6>
 800096a:	602f      	str	r7, [r5, #0]
 800096c:	e7b1      	b.n	80008d2 <__sflush_r+0x1a>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	81a3      	strh	r3, [r4, #12]
 8000976:	e7ad      	b.n	80008d4 <__sflush_r+0x1c>
 8000978:	690f      	ldr	r7, [r1, #16]
 800097a:	2f00      	cmp	r7, #0
 800097c:	d0a9      	beq.n	80008d2 <__sflush_r+0x1a>
 800097e:	0793      	lsls	r3, r2, #30
 8000980:	680e      	ldr	r6, [r1, #0]
 8000982:	bf08      	it	eq
 8000984:	694b      	ldreq	r3, [r1, #20]
 8000986:	600f      	str	r7, [r1, #0]
 8000988:	bf18      	it	ne
 800098a:	2300      	movne	r3, #0
 800098c:	eba6 0807 	sub.w	r8, r6, r7
 8000990:	608b      	str	r3, [r1, #8]
 8000992:	f1b8 0f00 	cmp.w	r8, #0
 8000996:	dd9c      	ble.n	80008d2 <__sflush_r+0x1a>
 8000998:	4643      	mov	r3, r8
 800099a:	463a      	mov	r2, r7
 800099c:	6a21      	ldr	r1, [r4, #32]
 800099e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009a0:	4628      	mov	r0, r5
 80009a2:	47b0      	blx	r6
 80009a4:	2800      	cmp	r0, #0
 80009a6:	dc06      	bgt.n	80009b6 <__sflush_r+0xfe>
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ae:	81a3      	strh	r3, [r4, #12]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	e78e      	b.n	80008d4 <__sflush_r+0x1c>
 80009b6:	4407      	add	r7, r0
 80009b8:	eba8 0800 	sub.w	r8, r8, r0
 80009bc:	e7e9      	b.n	8000992 <__sflush_r+0xda>
 80009be:	bf00      	nop
 80009c0:	20400001 	.word	0x20400001

080009c4 <_fflush_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	690b      	ldr	r3, [r1, #16]
 80009c8:	4605      	mov	r5, r0
 80009ca:	460c      	mov	r4, r1
 80009cc:	b1db      	cbz	r3, 8000a06 <_fflush_r+0x42>
 80009ce:	b118      	cbz	r0, 80009d8 <_fflush_r+0x14>
 80009d0:	6983      	ldr	r3, [r0, #24]
 80009d2:	b90b      	cbnz	r3, 80009d8 <_fflush_r+0x14>
 80009d4:	f000 f860 	bl	8000a98 <__sinit>
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <_fflush_r+0x48>)
 80009da:	429c      	cmp	r4, r3
 80009dc:	d109      	bne.n	80009f2 <_fflush_r+0x2e>
 80009de:	686c      	ldr	r4, [r5, #4]
 80009e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e4:	b17b      	cbz	r3, 8000a06 <_fflush_r+0x42>
 80009e6:	4621      	mov	r1, r4
 80009e8:	4628      	mov	r0, r5
 80009ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ee:	f7ff bf63 	b.w	80008b8 <__sflush_r>
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_fflush_r+0x4c>)
 80009f4:	429c      	cmp	r4, r3
 80009f6:	d101      	bne.n	80009fc <_fflush_r+0x38>
 80009f8:	68ac      	ldr	r4, [r5, #8]
 80009fa:	e7f1      	b.n	80009e0 <_fflush_r+0x1c>
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <_fflush_r+0x50>)
 80009fe:	429c      	cmp	r4, r3
 8000a00:	bf08      	it	eq
 8000a02:	68ec      	ldreq	r4, [r5, #12]
 8000a04:	e7ec      	b.n	80009e0 <_fflush_r+0x1c>
 8000a06:	2000      	movs	r0, #0
 8000a08:	bd38      	pop	{r3, r4, r5, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08000fbc 	.word	0x08000fbc
 8000a10:	08000fdc 	.word	0x08000fdc
 8000a14:	08000f9c 	.word	0x08000f9c

08000a18 <std>:
 8000a18:	2300      	movs	r3, #0
 8000a1a:	b510      	push	{r4, lr}
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a22:	6083      	str	r3, [r0, #8]
 8000a24:	8181      	strh	r1, [r0, #12]
 8000a26:	6643      	str	r3, [r0, #100]	; 0x64
 8000a28:	81c2      	strh	r2, [r0, #14]
 8000a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a2e:	6183      	str	r3, [r0, #24]
 8000a30:	4619      	mov	r1, r3
 8000a32:	2208      	movs	r2, #8
 8000a34:	305c      	adds	r0, #92	; 0x5c
 8000a36:	f7ff fe13 	bl	8000660 <memset>
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <std+0x38>)
 8000a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <std+0x3c>)
 8000a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <std+0x40>)
 8000a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <std+0x44>)
 8000a48:	6224      	str	r4, [r4, #32]
 8000a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	bf00      	nop
 8000a50:	08000de5 	.word	0x08000de5
 8000a54:	08000e07 	.word	0x08000e07
 8000a58:	08000e3f 	.word	0x08000e3f
 8000a5c:	08000e63 	.word	0x08000e63

08000a60 <_cleanup_r>:
 8000a60:	4901      	ldr	r1, [pc, #4]	; (8000a68 <_cleanup_r+0x8>)
 8000a62:	f000 b885 	b.w	8000b70 <_fwalk_reent>
 8000a66:	bf00      	nop
 8000a68:	080009c5 	.word	0x080009c5

08000a6c <__sfmoreglue>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	1e4a      	subs	r2, r1, #1
 8000a70:	2568      	movs	r5, #104	; 0x68
 8000a72:	4355      	muls	r5, r2
 8000a74:	460e      	mov	r6, r1
 8000a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a7a:	f000 f949 	bl	8000d10 <_malloc_r>
 8000a7e:	4604      	mov	r4, r0
 8000a80:	b140      	cbz	r0, 8000a94 <__sfmoreglue+0x28>
 8000a82:	2100      	movs	r1, #0
 8000a84:	e9c0 1600 	strd	r1, r6, [r0]
 8000a88:	300c      	adds	r0, #12
 8000a8a:	60a0      	str	r0, [r4, #8]
 8000a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a90:	f7ff fde6 	bl	8000660 <memset>
 8000a94:	4620      	mov	r0, r4
 8000a96:	bd70      	pop	{r4, r5, r6, pc}

08000a98 <__sinit>:
 8000a98:	6983      	ldr	r3, [r0, #24]
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	bb33      	cbnz	r3, 8000aee <__sinit+0x56>
 8000aa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000aa4:	6503      	str	r3, [r0, #80]	; 0x50
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <__sinit+0x58>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <__sinit+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6282      	str	r2, [r0, #40]	; 0x28
 8000aae:	4298      	cmp	r0, r3
 8000ab0:	bf04      	itt	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	6183      	streq	r3, [r0, #24]
 8000ab6:	f000 f81f 	bl	8000af8 <__sfp>
 8000aba:	6060      	str	r0, [r4, #4]
 8000abc:	4620      	mov	r0, r4
 8000abe:	f000 f81b 	bl	8000af8 <__sfp>
 8000ac2:	60a0      	str	r0, [r4, #8]
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f000 f817 	bl	8000af8 <__sfp>
 8000aca:	2200      	movs	r2, #0
 8000acc:	60e0      	str	r0, [r4, #12]
 8000ace:	2104      	movs	r1, #4
 8000ad0:	6860      	ldr	r0, [r4, #4]
 8000ad2:	f7ff ffa1 	bl	8000a18 <std>
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2109      	movs	r1, #9
 8000ada:	68a0      	ldr	r0, [r4, #8]
 8000adc:	f7ff ff9c 	bl	8000a18 <std>
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	2112      	movs	r1, #18
 8000ae4:	68e0      	ldr	r0, [r4, #12]
 8000ae6:	f7ff ff97 	bl	8000a18 <std>
 8000aea:	2301      	movs	r3, #1
 8000aec:	61a3      	str	r3, [r4, #24]
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	08000f98 	.word	0x08000f98
 8000af4:	08000a61 	.word	0x08000a61

08000af8 <__sfp>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <__sfp+0x70>)
 8000afc:	681e      	ldr	r6, [r3, #0]
 8000afe:	69b3      	ldr	r3, [r6, #24]
 8000b00:	4607      	mov	r7, r0
 8000b02:	b913      	cbnz	r3, 8000b0a <__sfp+0x12>
 8000b04:	4630      	mov	r0, r6
 8000b06:	f7ff ffc7 	bl	8000a98 <__sinit>
 8000b0a:	3648      	adds	r6, #72	; 0x48
 8000b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	d503      	bpl.n	8000b1c <__sfp+0x24>
 8000b14:	6833      	ldr	r3, [r6, #0]
 8000b16:	b133      	cbz	r3, 8000b26 <__sfp+0x2e>
 8000b18:	6836      	ldr	r6, [r6, #0]
 8000b1a:	e7f7      	b.n	8000b0c <__sfp+0x14>
 8000b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b20:	b16d      	cbz	r5, 8000b3e <__sfp+0x46>
 8000b22:	3468      	adds	r4, #104	; 0x68
 8000b24:	e7f4      	b.n	8000b10 <__sfp+0x18>
 8000b26:	2104      	movs	r1, #4
 8000b28:	4638      	mov	r0, r7
 8000b2a:	f7ff ff9f 	bl	8000a6c <__sfmoreglue>
 8000b2e:	6030      	str	r0, [r6, #0]
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1f1      	bne.n	8000b18 <__sfp+0x20>
 8000b34:	230c      	movs	r3, #12
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	4604      	mov	r4, r0
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <__sfp+0x74>)
 8000b40:	6665      	str	r5, [r4, #100]	; 0x64
 8000b42:	e9c4 5500 	strd	r5, r5, [r4]
 8000b46:	60a5      	str	r5, [r4, #8]
 8000b48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000b4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000b50:	2208      	movs	r2, #8
 8000b52:	4629      	mov	r1, r5
 8000b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b58:	f7ff fd82 	bl	8000660 <memset>
 8000b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b64:	e7e9      	b.n	8000b3a <__sfp+0x42>
 8000b66:	bf00      	nop
 8000b68:	08000f98 	.word	0x08000f98
 8000b6c:	ffff0001 	.word	0xffff0001

08000b70 <_fwalk_reent>:
 8000b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b74:	4680      	mov	r8, r0
 8000b76:	4689      	mov	r9, r1
 8000b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b914      	cbnz	r4, 8000b86 <_fwalk_reent+0x16>
 8000b80:	4630      	mov	r0, r6
 8000b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000b8a:	3f01      	subs	r7, #1
 8000b8c:	d501      	bpl.n	8000b92 <_fwalk_reent+0x22>
 8000b8e:	6824      	ldr	r4, [r4, #0]
 8000b90:	e7f5      	b.n	8000b7e <_fwalk_reent+0xe>
 8000b92:	89ab      	ldrh	r3, [r5, #12]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d907      	bls.n	8000ba8 <_fwalk_reent+0x38>
 8000b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	d003      	beq.n	8000ba8 <_fwalk_reent+0x38>
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4640      	mov	r0, r8
 8000ba4:	47c8      	blx	r9
 8000ba6:	4306      	orrs	r6, r0
 8000ba8:	3568      	adds	r5, #104	; 0x68
 8000baa:	e7ee      	b.n	8000b8a <_fwalk_reent+0x1a>

08000bac <__swhatbuf_r>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	460e      	mov	r6, r1
 8000bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	b096      	sub	sp, #88	; 0x58
 8000bb8:	4614      	mov	r4, r2
 8000bba:	461d      	mov	r5, r3
 8000bbc:	da07      	bge.n	8000bce <__swhatbuf_r+0x22>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	602b      	str	r3, [r5, #0]
 8000bc2:	89b3      	ldrh	r3, [r6, #12]
 8000bc4:	061a      	lsls	r2, r3, #24
 8000bc6:	d410      	bmi.n	8000bea <__swhatbuf_r+0x3e>
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	e00e      	b.n	8000bec <__swhatbuf_r+0x40>
 8000bce:	466a      	mov	r2, sp
 8000bd0:	f000 f96e 	bl	8000eb0 <_fstat_r>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	dbf2      	blt.n	8000bbe <__swhatbuf_r+0x12>
 8000bd8:	9a01      	ldr	r2, [sp, #4]
 8000bda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000be2:	425a      	negs	r2, r3
 8000be4:	415a      	adcs	r2, r3
 8000be6:	602a      	str	r2, [r5, #0]
 8000be8:	e7ee      	b.n	8000bc8 <__swhatbuf_r+0x1c>
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	2000      	movs	r0, #0
 8000bee:	6023      	str	r3, [r4, #0]
 8000bf0:	b016      	add	sp, #88	; 0x58
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}

08000bf4 <__smakebuf_r>:
 8000bf4:	898b      	ldrh	r3, [r1, #12]
 8000bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bf8:	079d      	lsls	r5, r3, #30
 8000bfa:	4606      	mov	r6, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	d507      	bpl.n	8000c10 <__smakebuf_r+0x1c>
 8000c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	6123      	str	r3, [r4, #16]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	6163      	str	r3, [r4, #20]
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	ab01      	add	r3, sp, #4
 8000c12:	466a      	mov	r2, sp
 8000c14:	f7ff ffca 	bl	8000bac <__swhatbuf_r>
 8000c18:	9900      	ldr	r1, [sp, #0]
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f000 f877 	bl	8000d10 <_malloc_r>
 8000c22:	b948      	cbnz	r0, 8000c38 <__smakebuf_r+0x44>
 8000c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c28:	059a      	lsls	r2, r3, #22
 8000c2a:	d4ef      	bmi.n	8000c0c <__smakebuf_r+0x18>
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	81a3      	strh	r3, [r4, #12]
 8000c36:	e7e3      	b.n	8000c00 <__smakebuf_r+0xc>
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <__smakebuf_r+0x7c>)
 8000c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c3c:	89a3      	ldrh	r3, [r4, #12]
 8000c3e:	6020      	str	r0, [r4, #0]
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	81a3      	strh	r3, [r4, #12]
 8000c46:	9b00      	ldr	r3, [sp, #0]
 8000c48:	6163      	str	r3, [r4, #20]
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	6120      	str	r0, [r4, #16]
 8000c4e:	b15b      	cbz	r3, 8000c68 <__smakebuf_r+0x74>
 8000c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c54:	4630      	mov	r0, r6
 8000c56:	f000 f93d 	bl	8000ed4 <_isatty_r>
 8000c5a:	b128      	cbz	r0, 8000c68 <__smakebuf_r+0x74>
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	f023 0303 	bic.w	r3, r3, #3
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	81a3      	strh	r3, [r4, #12]
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	431d      	orrs	r5, r3
 8000c6c:	81a5      	strh	r5, [r4, #12]
 8000c6e:	e7cd      	b.n	8000c0c <__smakebuf_r+0x18>
 8000c70:	08000a61 	.word	0x08000a61

08000c74 <_free_r>:
 8000c74:	b538      	push	{r3, r4, r5, lr}
 8000c76:	4605      	mov	r5, r0
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d045      	beq.n	8000d08 <_free_r+0x94>
 8000c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c80:	1f0c      	subs	r4, r1, #4
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bfb8      	it	lt
 8000c86:	18e4      	addlt	r4, r4, r3
 8000c88:	f000 f946 	bl	8000f18 <__malloc_lock>
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <_free_r+0x98>)
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	4610      	mov	r0, r2
 8000c92:	b933      	cbnz	r3, 8000ca2 <_free_r+0x2e>
 8000c94:	6063      	str	r3, [r4, #4]
 8000c96:	6014      	str	r4, [r2, #0]
 8000c98:	4628      	mov	r0, r5
 8000c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c9e:	f000 b93c 	b.w	8000f1a <__malloc_unlock>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d90c      	bls.n	8000cc0 <_free_r+0x4c>
 8000ca6:	6821      	ldr	r1, [r4, #0]
 8000ca8:	1862      	adds	r2, r4, r1
 8000caa:	4293      	cmp	r3, r2
 8000cac:	bf04      	itt	eq
 8000cae:	681a      	ldreq	r2, [r3, #0]
 8000cb0:	685b      	ldreq	r3, [r3, #4]
 8000cb2:	6063      	str	r3, [r4, #4]
 8000cb4:	bf04      	itt	eq
 8000cb6:	1852      	addeq	r2, r2, r1
 8000cb8:	6022      	streq	r2, [r4, #0]
 8000cba:	6004      	str	r4, [r0, #0]
 8000cbc:	e7ec      	b.n	8000c98 <_free_r+0x24>
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	b10a      	cbz	r2, 8000cc8 <_free_r+0x54>
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d9fa      	bls.n	8000cbe <_free_r+0x4a>
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	1858      	adds	r0, r3, r1
 8000ccc:	42a0      	cmp	r0, r4
 8000cce:	d10b      	bne.n	8000ce8 <_free_r+0x74>
 8000cd0:	6820      	ldr	r0, [r4, #0]
 8000cd2:	4401      	add	r1, r0
 8000cd4:	1858      	adds	r0, r3, r1
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	6019      	str	r1, [r3, #0]
 8000cda:	d1dd      	bne.n	8000c98 <_free_r+0x24>
 8000cdc:	6810      	ldr	r0, [r2, #0]
 8000cde:	6852      	ldr	r2, [r2, #4]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	4401      	add	r1, r0
 8000ce4:	6019      	str	r1, [r3, #0]
 8000ce6:	e7d7      	b.n	8000c98 <_free_r+0x24>
 8000ce8:	d902      	bls.n	8000cf0 <_free_r+0x7c>
 8000cea:	230c      	movs	r3, #12
 8000cec:	602b      	str	r3, [r5, #0]
 8000cee:	e7d3      	b.n	8000c98 <_free_r+0x24>
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	1821      	adds	r1, r4, r0
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	bf04      	itt	eq
 8000cf8:	6811      	ldreq	r1, [r2, #0]
 8000cfa:	6852      	ldreq	r2, [r2, #4]
 8000cfc:	6062      	str	r2, [r4, #4]
 8000cfe:	bf04      	itt	eq
 8000d00:	1809      	addeq	r1, r1, r0
 8000d02:	6021      	streq	r1, [r4, #0]
 8000d04:	605c      	str	r4, [r3, #4]
 8000d06:	e7c7      	b.n	8000c98 <_free_r+0x24>
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000084 	.word	0x20000084

08000d10 <_malloc_r>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	1ccd      	adds	r5, r1, #3
 8000d14:	f025 0503 	bic.w	r5, r5, #3
 8000d18:	3508      	adds	r5, #8
 8000d1a:	2d0c      	cmp	r5, #12
 8000d1c:	bf38      	it	cc
 8000d1e:	250c      	movcc	r5, #12
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	db01      	blt.n	8000d2a <_malloc_r+0x1a>
 8000d26:	42a9      	cmp	r1, r5
 8000d28:	d903      	bls.n	8000d32 <_malloc_r+0x22>
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	6033      	str	r3, [r6, #0]
 8000d2e:	2000      	movs	r0, #0
 8000d30:	bd70      	pop	{r4, r5, r6, pc}
 8000d32:	f000 f8f1 	bl	8000f18 <__malloc_lock>
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <_malloc_r+0xac>)
 8000d38:	6814      	ldr	r4, [r2, #0]
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	b991      	cbnz	r1, 8000d64 <_malloc_r+0x54>
 8000d3e:	4c20      	ldr	r4, [pc, #128]	; (8000dc0 <_malloc_r+0xb0>)
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	b91b      	cbnz	r3, 8000d4c <_malloc_r+0x3c>
 8000d44:	4630      	mov	r0, r6
 8000d46:	f000 f83d 	bl	8000dc4 <_sbrk_r>
 8000d4a:	6020      	str	r0, [r4, #0]
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f000 f838 	bl	8000dc4 <_sbrk_r>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	d124      	bne.n	8000da2 <_malloc_r+0x92>
 8000d58:	230c      	movs	r3, #12
 8000d5a:	6033      	str	r3, [r6, #0]
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	f000 f8dc 	bl	8000f1a <__malloc_unlock>
 8000d62:	e7e4      	b.n	8000d2e <_malloc_r+0x1e>
 8000d64:	680b      	ldr	r3, [r1, #0]
 8000d66:	1b5b      	subs	r3, r3, r5
 8000d68:	d418      	bmi.n	8000d9c <_malloc_r+0x8c>
 8000d6a:	2b0b      	cmp	r3, #11
 8000d6c:	d90f      	bls.n	8000d8e <_malloc_r+0x7e>
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	50cd      	str	r5, [r1, r3]
 8000d72:	18cc      	adds	r4, r1, r3
 8000d74:	4630      	mov	r0, r6
 8000d76:	f000 f8d0 	bl	8000f1a <__malloc_unlock>
 8000d7a:	f104 000b 	add.w	r0, r4, #11
 8000d7e:	1d23      	adds	r3, r4, #4
 8000d80:	f020 0007 	bic.w	r0, r0, #7
 8000d84:	1ac3      	subs	r3, r0, r3
 8000d86:	d0d3      	beq.n	8000d30 <_malloc_r+0x20>
 8000d88:	425a      	negs	r2, r3
 8000d8a:	50e2      	str	r2, [r4, r3]
 8000d8c:	e7d0      	b.n	8000d30 <_malloc_r+0x20>
 8000d8e:	428c      	cmp	r4, r1
 8000d90:	684b      	ldr	r3, [r1, #4]
 8000d92:	bf16      	itet	ne
 8000d94:	6063      	strne	r3, [r4, #4]
 8000d96:	6013      	streq	r3, [r2, #0]
 8000d98:	460c      	movne	r4, r1
 8000d9a:	e7eb      	b.n	8000d74 <_malloc_r+0x64>
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	6849      	ldr	r1, [r1, #4]
 8000da0:	e7cc      	b.n	8000d3c <_malloc_r+0x2c>
 8000da2:	1cc4      	adds	r4, r0, #3
 8000da4:	f024 0403 	bic.w	r4, r4, #3
 8000da8:	42a0      	cmp	r0, r4
 8000daa:	d005      	beq.n	8000db8 <_malloc_r+0xa8>
 8000dac:	1a21      	subs	r1, r4, r0
 8000dae:	4630      	mov	r0, r6
 8000db0:	f000 f808 	bl	8000dc4 <_sbrk_r>
 8000db4:	3001      	adds	r0, #1
 8000db6:	d0cf      	beq.n	8000d58 <_malloc_r+0x48>
 8000db8:	6025      	str	r5, [r4, #0]
 8000dba:	e7db      	b.n	8000d74 <_malloc_r+0x64>
 8000dbc:	20000084 	.word	0x20000084
 8000dc0:	20000088 	.word	0x20000088

08000dc4 <_sbrk_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4c06      	ldr	r4, [pc, #24]	; (8000de0 <_sbrk_r+0x1c>)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4605      	mov	r5, r0
 8000dcc:	4608      	mov	r0, r1
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	f7ff fbc6 	bl	8000560 <_sbrk>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_sbrk_r+0x1a>
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_sbrk_r+0x1a>
 8000ddc:	602b      	str	r3, [r5, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	2000008c 	.word	0x2000008c

08000de4 <__sread>:
 8000de4:	b510      	push	{r4, lr}
 8000de6:	460c      	mov	r4, r1
 8000de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dec:	f000 f896 	bl	8000f1c <_read_r>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	bfab      	itete	ge
 8000df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000df6:	89a3      	ldrhlt	r3, [r4, #12]
 8000df8:	181b      	addge	r3, r3, r0
 8000dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dfe:	bfac      	ite	ge
 8000e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e02:	81a3      	strhlt	r3, [r4, #12]
 8000e04:	bd10      	pop	{r4, pc}

08000e06 <__swrite>:
 8000e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0a:	461f      	mov	r7, r3
 8000e0c:	898b      	ldrh	r3, [r1, #12]
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	4605      	mov	r5, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	4616      	mov	r6, r2
 8000e16:	d505      	bpl.n	8000e24 <__swrite+0x1e>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e20:	f000 f868 	bl	8000ef4 <_lseek_r>
 8000e24:	89a3      	ldrh	r3, [r4, #12]
 8000e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e2e:	81a3      	strh	r3, [r4, #12]
 8000e30:	4632      	mov	r2, r6
 8000e32:	463b      	mov	r3, r7
 8000e34:	4628      	mov	r0, r5
 8000e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3a:	f000 b817 	b.w	8000e6c <_write_r>

08000e3e <__sseek>:
 8000e3e:	b510      	push	{r4, lr}
 8000e40:	460c      	mov	r4, r1
 8000e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e46:	f000 f855 	bl	8000ef4 <_lseek_r>
 8000e4a:	1c43      	adds	r3, r0, #1
 8000e4c:	89a3      	ldrh	r3, [r4, #12]
 8000e4e:	bf15      	itete	ne
 8000e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e5a:	81a3      	strheq	r3, [r4, #12]
 8000e5c:	bf18      	it	ne
 8000e5e:	81a3      	strhne	r3, [r4, #12]
 8000e60:	bd10      	pop	{r4, pc}

08000e62 <__sclose>:
 8000e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e66:	f000 b813 	b.w	8000e90 <_close_r>
	...

08000e6c <_write_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4c07      	ldr	r4, [pc, #28]	; (8000e8c <_write_r+0x20>)
 8000e70:	4605      	mov	r5, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	2200      	movs	r2, #0
 8000e78:	6022      	str	r2, [r4, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f7ff fb23 	bl	80004c6 <_write>
 8000e80:	1c43      	adds	r3, r0, #1
 8000e82:	d102      	bne.n	8000e8a <_write_r+0x1e>
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	b103      	cbz	r3, 8000e8a <_write_r+0x1e>
 8000e88:	602b      	str	r3, [r5, #0]
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <_close_r>:
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4c06      	ldr	r4, [pc, #24]	; (8000eac <_close_r+0x1c>)
 8000e94:	2300      	movs	r3, #0
 8000e96:	4605      	mov	r5, r0
 8000e98:	4608      	mov	r0, r1
 8000e9a:	6023      	str	r3, [r4, #0]
 8000e9c:	f7ff fb2f 	bl	80004fe <_close>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	d102      	bne.n	8000eaa <_close_r+0x1a>
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	b103      	cbz	r3, 8000eaa <_close_r+0x1a>
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <_fstat_r>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4c07      	ldr	r4, [pc, #28]	; (8000ed0 <_fstat_r+0x20>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	6023      	str	r3, [r4, #0]
 8000ebe:	f7ff fb29 	bl	8000514 <_fstat>
 8000ec2:	1c43      	adds	r3, r0, #1
 8000ec4:	d102      	bne.n	8000ecc <_fstat_r+0x1c>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	b103      	cbz	r3, 8000ecc <_fstat_r+0x1c>
 8000eca:	602b      	str	r3, [r5, #0]
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000008c 	.word	0x2000008c

08000ed4 <_isatty_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4c06      	ldr	r4, [pc, #24]	; (8000ef0 <_isatty_r+0x1c>)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4605      	mov	r5, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	6023      	str	r3, [r4, #0]
 8000ee0:	f7ff fb27 	bl	8000532 <_isatty>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d102      	bne.n	8000eee <_isatty_r+0x1a>
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	b103      	cbz	r3, 8000eee <_isatty_r+0x1a>
 8000eec:	602b      	str	r3, [r5, #0]
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <_lseek_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4c07      	ldr	r4, [pc, #28]	; (8000f14 <_lseek_r+0x20>)
 8000ef8:	4605      	mov	r5, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4611      	mov	r1, r2
 8000efe:	2200      	movs	r2, #0
 8000f00:	6022      	str	r2, [r4, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f7ff fb1f 	bl	8000546 <_lseek>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_lseek_r+0x1e>
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_lseek_r+0x1e>
 8000f10:	602b      	str	r3, [r5, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	2000008c 	.word	0x2000008c

08000f18 <__malloc_lock>:
 8000f18:	4770      	bx	lr

08000f1a <__malloc_unlock>:
 8000f1a:	4770      	bx	lr

08000f1c <_read_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4c07      	ldr	r4, [pc, #28]	; (8000f3c <_read_r+0x20>)
 8000f20:	4605      	mov	r5, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4611      	mov	r1, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	6022      	str	r2, [r4, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f7ff faae 	bl	800048c <_read>
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	d102      	bne.n	8000f3a <_read_r+0x1e>
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	b103      	cbz	r3, 8000f3a <_read_r+0x1e>
 8000f38:	602b      	str	r3, [r5, #0]
 8000f3a:	bd38      	pop	{r3, r4, r5, pc}
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr
